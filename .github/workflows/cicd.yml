name: CI/CD pipeline

on: push

env:
  DOCKERHUB_USERNAME: koffarn
  DOCKERHUB_TEST_TAG: bookcrud-cicd-aws:test
  DOCKERHUB_LATEST_TAG: bookcrud-cicd-aws:latest
  DOCKER_TEST_NAME: bookcrud-cicd-aws-test
  DOCKER_LATEST_NAME: bookcrud-cicd-aws-latest
  AWS_SSH: ec2-user@bookcrud-cicd-aws.duckdns.org
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn -B package --file pom.xml -DskipTests
      - run: mkdir staging && cp target/*.jar staging
      - name: Log in to Dockerhub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_TEST_TAG }}
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bookcrud-cicd-aws
          path: staging
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - name: set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: bookcrud-cicd-aws
          path: staging
      - name: Test with Maven
        run: mvn -DSPRING_PASSWORD=test test
      - name: Set private key
        run: |
          echo "${{ secrets.AWS_PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem
      - name: Smoke test docker
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ env.AWS_SSH }} 'sudo docker login -u ${{ env.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}'
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ env.AWS_SSH }} 'sudo docker pull ${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_TEST_TAG }}'
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ env.AWS_SSH }} 'sudo docker run -d -p80:8080 --name ${{ env.DOCKER_TEST_NAME }} -e "SPRING_PASSWORD=${{ secrets.SPRING_PASSWORD }}" ${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_TEST_TAG }}'
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ env.AWS_SSH }} '/home/ec2-user/smoke_test.sh'
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ env.AWS_SSH }} 'sudo docker stop ${{ env.DOCKER_TEST_NAME }} || true'
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ env.AWS_SSH }} 'sudo docker rm ${{ env.DOCKER_TEST_NAME }} || true'
      - name: Login to dockerhub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Publish docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_LATEST_TAG }}
  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Set private key
        run: |
          echo "${{ secrets.AWS_PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem
      - name: Log in to docker
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ env.AWS_SSH }} 'sudo docker login -u ${{ env.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}'
      - name: Pull docker image
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ env.AWS_SSH }} 'sudo docker pull ${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_LATEST_TAG }}'
      - name: Stop and remove old container
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ env.AWS_SSH }} 'sudo docker stop ${{ env.DOCKER_LATEST_NAME }} || true'
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ env.AWS_SSH }} 'sudo docker rm ${{ env.DOCKER_LATEST_NAME }} || true'
      - name: Run new container
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ env.AWS_SSH }} 'sudo docker run -d -p80:8080 --name ${{ env.DOCKER_LATEST_NAME }} -e "SPRING_PASSWORD=${{ secrets.SPRING_PASSWORD }}" ${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_LATEST_TAG }}'